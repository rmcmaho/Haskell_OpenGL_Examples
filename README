OpenGL Example Conversion
============================
This project is an attempt to convert the OpenGL examples from C to Haskell.
http://www.opengl.org/resources/code/samples/glut_examples/examples/examples.html

Where possible, the Haskell code resembles the C code as closely as possible. This is an attempt to help myself and others learn how to program OpenGL in Haskell.


Getting the source
============================
Newest source can be found on GitHub.
https://github.com/rmcmaho/Haskell_OpenGL_Examples/


Build and Running
============================

On Mac/Unix

   $ cabal configure
   $ cabal build
   $ ./dist/build/Spots/Spots
   $ ./dist/build/TriSelect/TriSelect
   (etc)

NOTE: On Mac (atleast), you should not do the following:
      
      $ runhaskell TriSelect.hs
      $ runhaskell Spots.hs
      (etc)

The examples tend to just hang and stop responding. *shrug*

On Windows

   ?????


Example Descriptions
============================

(1) Spots

    Three different colored spotlights spinning around a dance floor.
    The colors, Duke. The colors!

(2) TriSelect

    Generates 10 random triangles with different sizes, shapes, and colors.
    Left click a triangle to change the color.
    Middle click a triangle to increase the size.

(3) Cube

    Renders a red 3D lighted cube. Simple but informative.
    http://twoguysarguing.wordpress.com/2010/02/20/opengl-and-haskell/


Documentation
============================

Most code is ready for Haddock.
http://www.haskell.org/haskellwiki/How_to_write_a_Haskell_program#Build_some_haddock_documentation

Easiest way:
	$ cabal haddock --executables --hyperlink-source

That will generate documentation in "dist/doc/" for every executable with the source code colored and hyperlinked.
     
     